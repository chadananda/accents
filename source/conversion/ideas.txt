requirements:

Columns to import:
    "Original"(a) -> "original",
    "Times New Roman ebf engls"(b) ->  "term",
    "Definition"(e) -> "definition

The existing database looks like this:
http://accents.couchappy.com/_utils/document.html?accents/001B2279-E072-40CB-8797-B3BE12579A97
And example spreadsheet is here:
https://www.dropbox.com/s/ysty8lkmsn64ckr/Transliteration%20-%20LIST%20OF%20ORIENTAL%20TERMS%20-%20incremental%2C%202014-02-26%20%7BMarcel%7D.xlsm 

Filtering:
  The "term" field should not contain spaces. If a term with spaces is found, it should be split on spaces and each word added separately.
 The "term" field uses a custom font and needs to be translated into unicode. I'm not sure what all the characters are so we'll add that part at the very end.


 DB sample keys:

 id
 ref
 term
 type
 user


 Structure:
 {
 	id:genUUID('xxxxxxxxxx'),
 	source: 'marciel',
 	term:{
 		word1,
 		word2
 	},
 	original:"string",
 	definition:"string"
 }





 ================= TO DOs ====================


 ( Last to do )
    Speed up main term list
        Make it a vertical scrolling paginated view
        Possibly ordered by first alphabet letter
        Still sorted by "base" version

( This is tied up to the main term list )
    Improve as-you-type filtering
        show complete match at top of list (sometimes the perfect match is short and therefore buried)
        only start matching on >3 letters - done
        when typing, pause 2 seconds (naggle) on filter match to not seize typing
        keep hash list of fragment bases to spell check individually typed fragments (between dashes and apostrophes)

( Need details on the "Correction" page )
    Add "Correction" page
        Integrate diacriticals project
        Provide paste box for pasting in large blocks of HTML/text
        Provide filter options
        Provide view iFrame to see results
        Provide download button to pull down changed document

( Need details on the "conflict" page and the rules for conflicts )
    Add Conflict Report tab to first page or as additional 'app'
        show list of words with conflicted spellings
        show individual items and allow deletion


    Debugging
        Debug Javascript communications errors (so far no console messages on the errors are seen)
        Speed up batch data synchronization (need to understand this more)
        Remember highest page number provided even after logout/login (I think this is done already)
        Show some visual indication of data synchronizing or offline mode 
        Smooth offline operation (have to test this)
        Login
            hitting Enter in the first field should submit the form (done)
            should load faster after logging in. (using design document)

    Make app resize size to any window ( Implement using bootstrap )
        add vertical scroll bar for list ( use a div?? current design doesn't have a div)
        horizontal resize 

    Wrap up app in Node-Webkit wrapper for deployment to Mac and Windows (using grunt plugin)

    Use 'erica' library to store all files in a database
        URL pulls down loader stub which copies app to local files ?? (possible for node webkit version?)
        Background process updates app from synced DB
        Grunt or GitHub task pushes new changes to deploy DB


Prioritization
	based on ease of solution
		add vertical scroll bar for list (place the list inside a div) -  done
		horizontal resize (prob 100% height with recalc ) - done

	Investigate how queries are sent to PouchDB to pull data.

===================== List of Problems =====================

1) the DB page doesn't have the last page 
2) find should query the DB
	2.1) formulate a view that can produce a fast response for find
3) Unless the document view is implemented, loading accents will be slow
4) delete Word has errors (termsListLayout.add_term_filtered_table.close(); does not exist)
	4.1) I guess I need to go through this flow more
5) find out if query to CouchDB can pre-sort by term
	5.1) temporary view may be the only way to go


========= Things to do today ===================

1) Address problem on fetching more than once -done
	1.1) create a temporary flag if a loadmore request was sent
	1.2) 
2) get the highest DB page
	2.1) use a temporary view for now